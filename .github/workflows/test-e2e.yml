name: test e2e

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  test-unit:
    name: Unit test - Node.js ${{ matrix.os }} ${{ matrix.node-version }}
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        node-version: [18.x]
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - run: git config --global core.autocrlf false
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v2

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - run: pnpm build
      - run: pnpm test:ci
      - name: Extract platform
        if: always()
        run: echo "platform=$(echo ${{ matrix.os }} | cut -d '-' -f 1)" >> $GITHUB_ENV
      - name: Upload allure results
        id: upload-allure-results
        if: ${{ env.platform == 'ubuntu' && always() }}
        uses: actions/upload-artifact@v4
        with:
          name: allure_results_unit_${{ env.platform }}
          path: allure-results
          if-no-files-found: ignore
    outputs:
      artifact-id: ${{ steps.upload-allure-results.outputs.artifact-id || '' }}

  get-running-os-for-e2e:
    name: Get running OS for e2e test
    runs-on: ubuntu-latest
    outputs:
      os: ${{ steps.get-os.outputs.os }}
    steps:
      - id: get-os
        run: |
          if [ "${{ github.event_name }}" == "push" ]; then
            echo "os=['ubuntu-latest','windows-latest','macos-latest']" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" == "pull_request" ]; then
            echo "os=['ubuntu-latest','windows-latest']" >> $GITHUB_OUTPUT
          fi

  test-e2e:
    name: E2e test - Node.js ${{ matrix.os }} ${{ matrix.node-version }}
    runs-on: ${{ matrix.os }}
    concurrency:
      group: test-e2e-workflow-concurrency-group
      cancel-in-progress: false
    needs: get-running-os-for-e2e

    strategy:
      max-parallel: 1
      matrix:
        node-version: [18.x]
        os: ${{ fromJSON(needs.get-running-os-for-e2e.outputs.os) }}
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v2
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "pnpm"
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - run: pnpm build
      - name: Run e2e tests
        env:
          TEST_KINTONE_BASE_URL: ${{ secrets.TEST_KINTONE_BASE_URL }}
          TEST_KINTONE_CREDENTIAL_MANAGEMENT_APP_ID: ${{ secrets.TEST_KINTONE_CREDENTIAL_MANAGEMENT_APP_ID }}
          TEST_KINTONE_CREDENTIAL_MANAGEMENT_API_TOKEN: ${{ secrets.TEST_KINTONE_CREDENTIAL_MANAGEMENT_API_TOKEN }}
          TEST_KINTONE_USER_CREDENTIAL_MANAGEMENT_APP_ID: ${{ secrets.TEST_KINTONE_USER_CREDENTIAL_MANAGEMENT_APP_ID }}
          TEST_KINTONE_USER_CREDENTIAL_MANAGEMENT_API_TOKEN: ${{ secrets.TEST_KINTONE_USER_CREDENTIAL_MANAGEMENT_API_TOKEN }}
          TEST_KINTONE_SECRETS_APP_API_TOKEN: ${{ secrets.TEST_KINTONE_SECRETS_APP_API_TOKEN }}
        run: pnpm test:e2e:ci
      - name: Extract platform
        if: always()
        run: echo "platform=$(echo ${{ matrix.os }} | cut -d '-' -f 1)" >> $GITHUB_ENV
      - name: Upload allure results
        id: upload-allure-results
        if: ${{ env.platform == 'ubuntu' && always() }}
        uses: actions/upload-artifact@v4
        with:
          name: allure_results_e2e_${{ env.platform }}
          path: allure-results
          if-no-files-found: ignore
    outputs:
      artifact-id: ${{ steps.upload-allure-results.outputs.artifact-id || '' }}

  report:
    name: Generate report
    permissions:
      contents: write
    if: ${{ always() && (needs.test-e2e.outputs.artifact-id != '' || needs.test-unit.outputs.artifact-id != '') }}
    needs: [test-unit, test-e2e]
    runs-on: ubuntu-latest
    steps:
      - name: print test result
        run: |
          echo "Test result 1: ${{ needs.test-e2e.outputs.artifact-id }}"
          echo "Test result 2: ${{ needs.test-unit.outputs.artifact-id }}"
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: zulu
          java-version: 21
      - name: Download allure results
        id: download-allure-results
        uses: actions/download-artifact@v4
        with:
          pattern: allure_results_*
          merge-multiple: true
          path: allure-results

      - name: Load test report history
        id: allure-history
        uses: actions/checkout@v3
        continue-on-error: true # in case run without branch for GitHub page source
        with:
          ref: gh-pages
          path: gh-pages

      - name: Build test report
        id: allure-report
        if: always()
        uses: simple-elf/allure-report-action@v1.8
        with:
          gh_pages: gh-pages
          allure_history: allure-history
          allure_results: allure-results
          allure_report: allure-report
          keep_reports: 10

      - name: Publish test report
        id: deploy-allure-report-page
        if: steps.allure-report.outcome == 'success' # make sure the allure report is generated successfully
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: allure-history

      - name: Create job summaries
        if: steps.deploy-allure-report-page.outcome == 'success'
        run: |
          pages_url=https://${GITHUB_REPOSITORY_OWNER}.github.io/${GITHUB_REPOSITORY#${GITHUB_REPOSITORY_OWNER}/}/${{ github.run_attempt }}/#behaviors
          echo "[Allure report 📝](${pages_url})" >> $GITHUB_STEP_SUMMARY
